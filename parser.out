Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    RPAREN
    LPAREN
    DISJUNCTION

Grammar

Rule 0     S' -> expression
Rule 1     expression -> regexp expression
Rule 2     expression -> regexp
Rule 3     regexp -> CHARACTER
Rule 4     regexp -> regexp MULTIPLIER

Terminals, with rules where they appear

CHARACTER            : 3
DISJUNCTION          : 
LPAREN               : 
MULTIPLIER           : 4
RPAREN               : 
error                : 

Nonterminals, with rules where they appear

expression           : 1 0
regexp               : 1 2 4

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . regexp expression
    (2) expression -> . regexp
    (3) regexp -> . CHARACTER
    (4) regexp -> . regexp MULTIPLIER

    CHARACTER       shift and go to state 2

    regexp                         shift and go to state 1
    expression                     shift and go to state 3

state 1

    (1) expression -> regexp . expression
    (2) expression -> regexp .
    (4) regexp -> regexp . MULTIPLIER
    (1) expression -> . regexp expression
    (2) expression -> . regexp
    (3) regexp -> . CHARACTER
    (4) regexp -> . regexp MULTIPLIER

    $end            reduce using rule 2 (expression -> regexp .)
    MULTIPLIER      shift and go to state 5
    CHARACTER       shift and go to state 2

    regexp                         shift and go to state 1
    expression                     shift and go to state 4

state 2

    (3) regexp -> CHARACTER .

    MULTIPLIER      reduce using rule 3 (regexp -> CHARACTER .)
    CHARACTER       reduce using rule 3 (regexp -> CHARACTER .)
    $end            reduce using rule 3 (regexp -> CHARACTER .)


state 3

    (0) S' -> expression .



state 4

    (1) expression -> regexp expression .

    $end            reduce using rule 1 (expression -> regexp expression .)


state 5

    (4) regexp -> regexp MULTIPLIER .

    MULTIPLIER      reduce using rule 4 (regexp -> regexp MULTIPLIER .)
    CHARACTER       reduce using rule 4 (regexp -> regexp MULTIPLIER .)
    $end            reduce using rule 4 (regexp -> regexp MULTIPLIER .)

