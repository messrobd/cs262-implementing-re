Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> regexp expression
Rule 2     expression -> regexp
Rule 3     regexp -> CHARACTER
Rule 4     expression -> expression MULTIPLIER
Rule 5     expression -> expression DISJUNCTION expression
Rule 6     expression -> LPAREN expression RPAREN

Terminals, with rules where they appear

CHARACTER            : 3
DISJUNCTION          : 5
LPAREN               : 6
MULTIPLIER           : 4
RPAREN               : 6
error                : 

Nonterminals, with rules where they appear

expression           : 1 4 5 5 6 0
regexp               : 1 2

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . regexp expression
    (2) expression -> . regexp
    (4) expression -> . expression MULTIPLIER
    (5) expression -> . expression DISJUNCTION expression
    (6) expression -> . LPAREN expression RPAREN
    (3) regexp -> . CHARACTER

    LPAREN          shift and go to state 2
    CHARACTER       shift and go to state 1

    regexp                         shift and go to state 3
    expression                     shift and go to state 4

state 1

    (3) regexp -> CHARACTER .

    LPAREN          reduce using rule 3 (regexp -> CHARACTER .)
    CHARACTER       reduce using rule 3 (regexp -> CHARACTER .)
    MULTIPLIER      reduce using rule 3 (regexp -> CHARACTER .)
    DISJUNCTION     reduce using rule 3 (regexp -> CHARACTER .)
    $end            reduce using rule 3 (regexp -> CHARACTER .)
    RPAREN          reduce using rule 3 (regexp -> CHARACTER .)


state 2

    (6) expression -> LPAREN . expression RPAREN
    (1) expression -> . regexp expression
    (2) expression -> . regexp
    (4) expression -> . expression MULTIPLIER
    (5) expression -> . expression DISJUNCTION expression
    (6) expression -> . LPAREN expression RPAREN
    (3) regexp -> . CHARACTER

    LPAREN          shift and go to state 2
    CHARACTER       shift and go to state 1

    regexp                         shift and go to state 3
    expression                     shift and go to state 5

state 3

    (1) expression -> regexp . expression
    (2) expression -> regexp .
    (1) expression -> . regexp expression
    (2) expression -> . regexp
    (4) expression -> . expression MULTIPLIER
    (5) expression -> . expression DISJUNCTION expression
    (6) expression -> . LPAREN expression RPAREN
    (3) regexp -> . CHARACTER

    RPAREN          reduce using rule 2 (expression -> regexp .)
    MULTIPLIER      reduce using rule 2 (expression -> regexp .)
    DISJUNCTION     reduce using rule 2 (expression -> regexp .)
    $end            reduce using rule 2 (expression -> regexp .)
    LPAREN          shift and go to state 2
    CHARACTER       shift and go to state 1

    regexp                         shift and go to state 3
    expression                     shift and go to state 6

state 4

    (0) S' -> expression .
    (4) expression -> expression . MULTIPLIER
    (5) expression -> expression . DISJUNCTION expression

    MULTIPLIER      shift and go to state 8
    DISJUNCTION     shift and go to state 7


state 5

    (6) expression -> LPAREN expression . RPAREN
    (4) expression -> expression . MULTIPLIER
    (5) expression -> expression . DISJUNCTION expression

    RPAREN          shift and go to state 9
    MULTIPLIER      shift and go to state 8
    DISJUNCTION     shift and go to state 7


state 6

    (1) expression -> regexp expression .
    (4) expression -> expression . MULTIPLIER
    (5) expression -> expression . DISJUNCTION expression

  ! shift/reduce conflict for MULTIPLIER resolved as shift
  ! shift/reduce conflict for DISJUNCTION resolved as shift
    RPAREN          reduce using rule 1 (expression -> regexp expression .)
    $end            reduce using rule 1 (expression -> regexp expression .)
    MULTIPLIER      shift and go to state 8
    DISJUNCTION     shift and go to state 7

  ! MULTIPLIER      [ reduce using rule 1 (expression -> regexp expression .) ]
  ! DISJUNCTION     [ reduce using rule 1 (expression -> regexp expression .) ]


state 7

    (5) expression -> expression DISJUNCTION . expression
    (1) expression -> . regexp expression
    (2) expression -> . regexp
    (4) expression -> . expression MULTIPLIER
    (5) expression -> . expression DISJUNCTION expression
    (6) expression -> . LPAREN expression RPAREN
    (3) regexp -> . CHARACTER

    LPAREN          shift and go to state 2
    CHARACTER       shift and go to state 1

    regexp                         shift and go to state 3
    expression                     shift and go to state 10

state 8

    (4) expression -> expression MULTIPLIER .

    RPAREN          reduce using rule 4 (expression -> expression MULTIPLIER .)
    MULTIPLIER      reduce using rule 4 (expression -> expression MULTIPLIER .)
    DISJUNCTION     reduce using rule 4 (expression -> expression MULTIPLIER .)
    $end            reduce using rule 4 (expression -> expression MULTIPLIER .)


state 9

    (6) expression -> LPAREN expression RPAREN .

    RPAREN          reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    MULTIPLIER      reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    DISJUNCTION     reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 6 (expression -> LPAREN expression RPAREN .)


state 10

    (5) expression -> expression DISJUNCTION expression .
    (4) expression -> expression . MULTIPLIER
    (5) expression -> expression . DISJUNCTION expression

  ! shift/reduce conflict for MULTIPLIER resolved as shift
  ! shift/reduce conflict for DISJUNCTION resolved as shift
    RPAREN          reduce using rule 5 (expression -> expression DISJUNCTION expression .)
    $end            reduce using rule 5 (expression -> expression DISJUNCTION expression .)
    MULTIPLIER      shift and go to state 8
    DISJUNCTION     shift and go to state 7

  ! MULTIPLIER      [ reduce using rule 5 (expression -> expression DISJUNCTION expression .) ]
  ! DISJUNCTION     [ reduce using rule 5 (expression -> expression DISJUNCTION expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MULTIPLIER in state 6 resolved as shift
WARNING: shift/reduce conflict for DISJUNCTION in state 6 resolved as shift
WARNING: shift/reduce conflict for MULTIPLIER in state 10 resolved as shift
WARNING: shift/reduce conflict for DISJUNCTION in state 10 resolved as shift
